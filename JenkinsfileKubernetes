node{
     
    stage('SCM Checkout'){
        git url:  'https://github.com/sonali-source/Repo.git',branch: 'master'
    }
    
   // stage(" Maven Clean Package")
    //{
      //def mavenHome =  tool name: "MAVEN_HOME", type: "maven"
      //def mavenCMD = "${mavenHome}/bin/mvn"
      //sh "mvn clean package"
      
    //} 
    
    stage('Build') {
            steps {
                sh 'mvn clean package'
            }
        }
    
    
   // stage ('publish artifact to jrog repo')
   // { steps {  } }
    
    
  //  stage('Build Docker Image'){
  //      sh 'docker rmi -f pkw0301/spring-boot-mongo'
  //      sh 'docker build -t pkw0301/spring-boot-mongo .'
  //  }
    

//  stage('Twistlock Scan') {
//      steps {
//     Identify vulnerabilities for the docker images
//    twistlockScan ca: '', cert: '', compliancePolicy: 'warn', containerized: false, dockerAddress: 'add your configured add', gracePeriodDays: 7, ignoreImageBuildTime: false,repository: 'your-repo-url', image: 'your docker container url', tag: 'latest ', key: '', logLevel: 'true', policy: 'warn',  requirePackageUpdate: false, timeout: 10
//    }
//    }
//  stage('Twistlock Publish') {
//            steps {
//            //Publish twistlock analysis result
//                twistlockPublish ca: '', cert: '', dockerAddress: 'add your configured add', key: '',gracePeriodDays: 7, image: 'your docker container url', logLevel: 'true', timeout: 10
//            }
//        }






    
 //   stage {'push docker image to ACr/Dcokerhub'}
 //   { steps { // This step should not normally be used in your script. Consult the inline help for details.
//withDockerRegistry(credentialsId: 'DockerHubReg', url: 'https://index.docker.io/v1/') {
//   sh 'docker push pkw0301/spring-boot-mongo'
//} }}
     
     
     stage("Deploy To Kuberates Cluster")
     {
     sh "kubernetesDeploy configs: 'springBootMongo.yml', kubeConfig: [path: '/var/lib/jenkins/workspace/kubeconfig'], kubeconfigId: 'kubetntes', secretName: '', ssh: [sshCredentialsId: 'ssh-k8smaster', sshServer: '3.71.27.155'], textCredentials: [certificateAuthorityData: '', clientCertificateData: '', clientKeyData: '', serverUrl: 'https://']"
       }
	 
    
//}
}


