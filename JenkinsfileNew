pipeline {
    agent any

    environment {
        MAVEN_HOME = tool name: "MAVEN_HOME", type: "maven"
        MAVEN_CMD = "${env.MAVEN_HOME}/bin/mvn"
    }

    stages {
        stage('SCM Checkout') {
            steps {
                git url: 'https://github.com/sonali-source/Repo.git', branch: 'master'
            }
        }

        stage('Maven Clean Package') {
            steps {
                sh "${env.MAVEN_CMD} clean package"
            }
        }

     /*   stage('Build Docker Image') {
            steps {
                sh 'docker rmi -f pkw0301/spring-boot-mongo || true'
                sh 'docker build -t pkw0301/spring-boot-mongo .'
            }
        }

        stage('Twistlock Scan') {
            steps {
                twistlockScan ca: '', cert: '', compliancePolicy: 'warn', containerized: false, 
                              dockerAddress: 'add your configured add', gracePeriodDays: 7, 
                              ignoreImageBuildTime: false, repository: 'your-repo-url', 
                              image: 'your docker container url', tag: 'latest', key: '', 
                              logLevel: 'true', policy: 'warn', requirePackageUpdate: false, 
                              timeout: 10
            }
        }

        stage('Twistlock Publish') {
            steps {
                twistlockPublish ca: '', cert: '', dockerAddress: 'add your configured add', key: '', 
                                 gracePeriodDays: 7, image: 'your docker container url', 
                                 logLevel: 'true', timeout: 10
            }
        }

        stage('Push Docker Image to ACR/DockerHub') {
            steps {
                withDockerRegistry(credentialsId: 'DockerHubReg', url: 'https://index.docker.io/v1/') {
                    sh 'docker push pkw0301/spring-boot-mongo'
                }
            }
        }

        stage('Deploy To Kubernetes Cluster') {
            steps {
                sh "kubernetesDeploy configs: 'springBootMongo.yml', kubeConfig: [path: '/var/lib/jenkins/workspace/kubeconfig'], kubeconfigId: 'kubetntes', secretName: '', ssh: [sshCredentialsId: 'ssh-k8smaster', sshServer: '3.71.27.155'], textCredentials: [certificateAuthorityData: '', clientCertificateData: '', clientKeyData: '', serverUrl: 'https://']"
            }
        }
    }
}
*/



/*pipeline
{
    agent any
    stages
    {
        stage('scm checkout')
  { steps {  git branch: 'master', url: 'https://github.com/prakashk0301/maven-project'  } }
    
//    
//    stage ('docker build and push')
 // {steps 
 // {sh 'kubernetesDeploy configs: 'springBootMongo.yml', kubeConfig: [path: ''], kubeconfigId: 'KUBERNETES_CLUSTER_CONFIG', secretName: '', ssh: [sshCredentialsId: '*', sshServer: ''], textCredentials: [certificateAuthorityData: '', clientCertificateData: '', clientKeyData: '', serverUrl: 'https://']'}
    
 }

}
*/
